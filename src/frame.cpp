// -*- C++ -*- generated by wxGlade 0.6.5 (standalone edition) on Wed Nov 21 15:09:11 2012
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

// for all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWidgets headers)
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

#ifndef wxHAS_IMAGES_IN_RESOURCES
    #include "BaseballDraft.xpm"
#endif

#include <vector>
#include <set>
#include <map>
#include <algorithm>
#include "sqlite3.h"
#include "wx/tipdlg.h"
#include "wx/grid.h"
#include "wx/combo.h"
#include "wx/progdlg.h"
#include "wx/propgrid/propgrid.h"
#include "wx/spinctrl.h"
#include "wx/tglbtn.h"
#include "wx/collpane.h"
#include "wx/textcompleter.h"
#include "textctrl.h"
#include "leaguesettings.h"
#include "enterstats.h"
#include "addnewplayer.h"
#include "db.h"
#include "newleaguescoring.h"
#include "namecompleter.h"
#include "playerdraft.h"
#include "playerspanel.h"
#include "teamsroster.h"
#include "playerdropped.h"
#include "teamprojections.h"
#include "draftresultsalary.h"
#include "draftresultpanel.h"
#include "draftresult.h"
#include "gridtotalcell.h"
#include "edittargets.h"
#include "editcolumn.h"
#include "frame.h"

wxDEFINE_EVENT(EVT_ASSIGN_DRAFTED_PLAYERS, wxCommandEvent);

BEGIN_EVENT_TABLE(CFrame, wxFrame)
	EVT_MENU(wxMENU_FILE_ADD_PLAYER, CFrame::OnAddNewPlayer)
	EVT_MENU(wxMENU_FILE_RESET_ALL_PLAYERS, CFrame::OnClearAllPlayers)
	EVT_MENU(wxMENU_FILE_CLEARALL, CFrame::OnClearAllPlayers)
	EVT_MENU(wxMENU_EDIT_TARGETS, CFrame::OnEditTargets)
	EVT_MENU(wxID_EXIT, CFrame::OnExit)
	EVT_CLOSE(CFrame::OnClose)
END_EVENT_TABLE()

CFrame::CFrame(const wxString &title, CLeagueSettings *league, const CDb &db, const wxString &name, const wxLongLong_t leagueId) : wxFrame( NULL, wxID_ANY, title )
{
	m_isGood = true;
	m_dirty = false;
	m_oldOwner = "Team 1";
	m_hittersDrafted = m_pitchersDrafted = NULL;
	m_hideRoster = NULL;
	m_teams = NULL;
	m_playersData = NULL;
	m_rostersData = NULL;
	m_teamProjectionsData = NULL;
	m_draftResultsData = NULL;
	m_panel1 = NULL;
	m_panel2 = NULL;
	m_draftPlayer = NULL;
	SetIcon( wxICON( BaseballDraft ) );
	m_availablePlayers = 0;
	m_zeroRanked = 0;
	m_totalSpent = 0;
	m_draftedBeginValue = 0;
	wxProgressDialog dlg( "Fantasy Draft", "Please wait, data is being retrieved...", 100, NULL, wxPD_SMOOTH );
	dlg.Pulse( "Please wait, data is being retrieved..." );
	m_rosterDisplayed = true;
	wxMenu *file_menu = new wxMenu();
	wxMenu *edit_menu = new wxMenu();
	wxMenu *activate_menu = new wxMenu();
	wxMenu *help_menu = new wxMenu();
	file_menu->Append( wxMENU_FILE_ADD_PLAYER, "Add New Player\tCtrl+N", "Add New Player" );
	file_menu->Append( wxMENU_FILE_RESET_ALL_PLAYERS, "Reset to Default", "Reset to Default" );
	file_menu->Append( wxMENU_FILE_CLEARALL, "Clear All Drafted Players", "Clear All Players" );
	file_menu->Append( wxID_EXIT, "Save and Exit\tAlt-X", "Exit the program" );
	edit_menu->Append( wxMENU_EDIT_LEAGUE_SETTINGS, "League Settings", "League Settings" );
	edit_menu->Append( wxMENU_EDIT_TARGETS, "Targets", "Targets" );
	wxMenuBar *bar = new wxMenuBar();
	bar->Append( file_menu, "&League" );
	bar->Append( edit_menu, "&Edit" );
	bar->Append( activate_menu, "&Activate" );
	bar->Append( help_menu, "&Help" );
	SetMenuBar( bar );
	m_db = const_cast<CDb *>( &db );
	m_data = new CLeagueData();
	if( LoadLeagueData( league, db, *m_data, name, leagueId, m_availablePlayers, m_draftResult, m_zeroRanked ) != SQLITE_OK )
	{
		m_isGood = false;
		return;
	}
	m_db->GetPositionCount( m_data->m_settings->GetLeagueName(), m_positions );
	m_db->GetLeagueScoring( m_data->m_settings->GetLeagueName(), m_leagueScoringHitters, m_leagueScoringPitchers );
	for( std::vector<wxString>::iterator it = m_data->m_settings->GetHitScoring().begin(); it < m_data->m_settings->GetHitScoring().end(); it++ )
		m_columnsDisplayedHitters[(*it)] = true;
	for( std::vector<wxString>::iterator it = m_data->m_settings->GetPitchScoring().begin(); it < m_data->m_settings->GetPitchScoring().end(); it++ )
		m_columnsDisplayedPitchers[(*it)] = true;
	m_columnsDisplayed["BegValue"] = true;
	m_columnsDisplayed["CurrValue"] = true;
	m_columnsDisplayed["AmtPaid"] = true;
	m_columnsDisplayed["Profit"] = true;
	m_columnsDisplayed["Owner"] = true;
	m_columnsDisplayed["Age"] = false;
	m_columnsDisplayed["Notes"] = true;
	m_budget = m_valueLeft = m_budgetPaid = m_budgetValue = (double) m_data->m_settings->GetSalary() * m_data->m_settings->GetOwnersNumber();
	int players = m_data->m_settings->GetPlayersInLeague();
	if( m_data->m_settings->GetLeagueType() )
	{
		players -= m_data->m_settings->GetPositions()["DH"];
		players -= m_data->m_settings->GetPositions()["SP"];
		players -= m_data->m_settings->GetPositions()["RP"];
	}
	for( std::vector<std::string>::iterator it = m_data->m_settings->GetOwners().begin(); it < m_data->m_settings->GetOwners().end(); it++ )
	{
		m_maxBidValue[(*it)] = m_data->m_settings->GetSalary() - ( players - 1 );
		m_playersLeftInLeague[(*it)] = players;
		m_leagueSalary[(*it)] = m_data->m_settings->GetSalary();
	}
	m_panel = new wxPanel( this, wxID_ANY );
	m_label1 = new wxStaticText( m_panel, wxID_ANY, "Owner" );
	const wxString *m_teams_choices = NULL;
	m_teams = new wxComboBox( m_panel, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, m_teams_choices, wxCB_DROPDOWN | wxCB_READONLY );
	m_hideRoster = new wxButton( m_panel, wxID_ANY, "Hide" );
	m_label2 = new wxStaticText( m_panel, wxID_ANY, "Hitters" );
	m_hittersDrafted = new CMyGrid( m_panel );
	m_label3 = new wxStaticText( m_panel, wxID_ANY, "Pitchers:" );
	m_pitchersDrafted = new CMyGrid( m_panel );
	m_label4 = new wxStaticText( m_panel, wxID_ANY, "Salary Left:" );
	m_salaryLeft = new wxStaticText( m_panel, wxID_ANY, "$0" );
	m_label7 = new wxStaticText( m_panel, wxID_ANY, "Inflation" );
	m_inflationRatio = 1.0;
	m_inflation = new wxStaticText( m_panel, wxID_ANY, wxString::Format( "%.2f", m_inflationRatio ) );
	m_label5 = new wxStaticText( m_panel, wxID_ANY, "Players Left:" );
	m_playersLeft = new wxStaticText( m_panel, wxID_ANY, "0" );
	m_label8 = new wxStaticText( m_panel, wxID_ANY, "Profit:" );
	m_profit = new wxStaticText( m_panel, wxID_ANY, "0" );
	m_label6 = new wxStaticText( m_panel, wxID_ANY, "Avg $/player left" );
	m_average = new wxStaticText( m_panel, wxID_ANY, "0" );
	m_label9 = new wxStaticText( m_panel, wxID_ANY, "Max Bid:" );
	m_maxBid = new wxStaticText( m_panel, wxID_ANY, "0" );
	m_draftPlayer = new CPlayerDraft( m_panel, *m_data );
	m_playersData = new wxButton( m_panel, wxID_ANY, "Players" );
	m_rostersData = new wxButton( m_panel, wxID_ANY, "Rosters" );
	m_teamProjectionsData = new wxButton( m_panel, wxID_ANY, "Projected Standings" );
	m_draftResultsData = new wxButton( m_panel, wxID_ANY, "Draft Results" );
	m_panel1 = new CPlayersPanel( m_panel, *m_data );
	m_panel2 = new CTeamsRoster( m_panel, *m_data->m_settings, m_draftResult );
	m_panel3 = new CTeamProjections( m_panel, *m_data->m_settings, m_draftResult );
	m_panel4 = new CDraftResult( m_panel, *m_data->m_settings, m_draftResult );
	set_properties();
	do_layout();
	wxCommandEvent myEvent( EVT_ASSIGN_DRAFTED_PLAYERS );
	wxPostEvent( m_panel2, myEvent );
	SetSizeHints( 100, 100 );
	m_panel1->GetPlayerNameCtrl().SetFocus();
	m_hittersDrafted->Bind( wxEVT_GRID_CELL_LEFT_CLICK, &CFrame::OnHittersEdit, this );
	m_pitchersDrafted->Bind( wxEVT_GRID_CELL_LEFT_CLICK, &CFrame::OnPitchersEdit, this );
	m_hideRoster->Bind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnHideShowteamRoster, this );
	m_hittersDrafted->Bind( wxEVT_GRID_CELL_CHANGED, &CFrame::OnRosterGridCellChange, this );
	m_pitchersDrafted->Bind( wxEVT_GRID_CELL_CHANGED, &CFrame::OnRosterGridCellChange, this );
	m_teams->Bind( wxEVT_COMMAND_COMBOBOX_SELECTED, &CFrame::OnSelectingOwner, this );
	m_playersData->Bind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayPlayersData, this );
	m_rostersData->Bind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayRoster, this );
	m_teamProjectionsData->Bind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayProjections, this );
	m_draftResultsData->Bind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDraftResult, this );
	Bind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnUnAssignPlayer, this, wxMENU_UNASSIGN_PLAYER );
	Bind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnPrepareDraft, this, wxMENU_DRAFT_PLAYER );
	Bind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnAddNewPlayer, this, wxMENU_EDIT_PLAYER );
	Bind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnDeletePlayer, this, wxMENU_DELETE_PLAYER );
}

CFrame::~CFrame(void)
{
	if( m_hittersDrafted )
	{
		m_hittersDrafted->Unbind( wxEVT_GRID_CELL_LEFT_CLICK, &CFrame::OnHittersEdit, this );
		m_hittersDrafted->Unbind( wxEVT_GRID_CELL_CHANGED, &CFrame::OnRosterGridCellChange, this );
		m_hittersDrafted->Unbind( wxEVT_GRID_CELL_RIGHT_CLICK, &CFrame::OnContextMenu, this );
	}
	if( m_pitchersDrafted )
	{
		m_pitchersDrafted->Unbind( wxEVT_GRID_CELL_LEFT_CLICK, &CFrame::OnPitchersEdit, this );
		m_pitchersDrafted->Unbind( wxEVT_GRID_CELL_CHANGED, &CFrame::OnRosterGridCellChange, this );
		m_pitchersDrafted->Unbind( wxEVT_GRID_CELL_RIGHT_CLICK, &CFrame::OnContextMenu, this );
	}
	if( m_hideRoster )
		m_hideRoster->Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnHideShowteamRoster, this );
	if( m_teams )
		m_teams->Unbind( wxEVT_COMMAND_COMBOBOX_SELECTED, &CFrame::OnSelectingOwner, this );
	if( m_playersData )
		m_playersData->Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayPlayersData, this );
	if( m_rostersData )
		m_rostersData->Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayRoster, this );
	if( m_teamProjectionsData )
		m_teamProjectionsData->Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDisplayProjections, this );
	if( m_draftResultsData )
		m_draftResultsData->Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDraftResult, this );
	Unbind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnUnAssignPlayer, this, wxMENU_UNASSIGN_PLAYER );
	Unbind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnPrepareDraft, this, wxMENU_DRAFT_PLAYER );
	Unbind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnAddNewPlayer, this, wxMENU_EDIT_PLAYER );
	Unbind( wxEVT_COMMAND_MENU_SELECTED, &CFrame::OnDeletePlayer, this, wxMENU_DELETE_PLAYER );
	if( m_panel1 )
	{
		m_panel1->GetAddPlayerButton().Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnAddNewPlayer, this );
		m_panel1->GetPlayersGrid()->Unbind( wxEVT_GRID_CELL_RIGHT_CLICK, &CFrame::OnContextMenu, this );
		m_panel1->GetEditColumnsButton().Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnEditColumns, this );
	}
	if( m_panel2 )
		m_panel2->GetRosterControl().Unbind( wxEVT_GRID_CELL_RIGHT_CLICK, &CFrame::OnContextMenu, this );
	if( m_draftPlayer )
		m_draftPlayer->GetDraftButton().Unbind( wxEVT_COMMAND_BUTTON_CLICKED, &CFrame::OnDraftPerformed, this );
	delete m_db;
	m_db = NULL;
	delete m_data->m_settings;
	m_data->m_settings = NULL;
	delete m_data->m_players;
	m_data->m_players = NULL;
	delete m_data;
	m_data = NULL;
}

void CFrame::OnClose(wxCloseEvent &event)
{
	if( m_dirty )
	{
		int answer = wxMessageBox( "Do you want to save the changes?", "Message", wxYES_NO | wxCANCEL | wxCENTRE | wxYES_DEFAULT );
		int size = m_data->m_players->size();
		if( answer == wxYES )
		{
			wxProgressDialog dlg( "Data saving in progress", wxString( "", 100 ), size, this, wxPD_CAN_ABORT | wxPD_APP_MODAL | wxPD_AUTO_HIDE | wxPD_SMOOTH );
			int counter = 1;
			int i = 1, res;
			bool success = true;
			bool skip = false;
			m_db->StartTransaction();
			res = m_db->DeleteAllDraft( m_leagueId );
			if( res == SQLITE_OK )
			{
				wxString errorMessage = wxEmptyString;
				for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !success; it++ )
				{
					wxString message = wxString::Format( "Updating player %d of %d", counter, size );
					bool cont = dlg.Update( i, message, &skip );
					if( !skip )
					{
						counter++;
						if( counter % 10 == 0 )
						{
							i += 10;
							if( i >= size )
								i = size - 1;
						}
					}
					if( !cont )
					{
						success = true;
						m_db->FinishTransaction( success );
						event.Veto();
					}
					else
					{
						if( (*it).IsNewPlayer() )
							res = m_db->AddNewPlayer( (*it), m_leagueId, false, errorMessage );
						else
							res = m_db->UpdatePlayer( (*it), m_leagueId, errorMessage );
						if( res == SQLITE_OK )
						{
							dlg.Destroy();
							wxMessageBox( wxString::Format( "Error occured while saving data: %s", errorMessage ) );
							event.Skip();
							m_db->FinishTransaction( false );
							return;
						}
					}
				}
			}
			m_db->FinishTransaction( !success );
		}
		if( answer == wxNO )
			event.Skip();
		if( answer == wxCANCEL )
			event.Veto();
	}
	else
		event.Skip();
}

void CFrame::set_properties()
{
	int hitters = CalculateHitters(), pitchers = CalculatePitchers();
	DisplayOwnerParameters( hitters, pitchers );
	std::vector<std::string>::iterator it;
	for( it = m_data->m_settings->GetOwners().begin(); it < m_data->m_settings->GetOwners().end(); it++ )
		m_teams->Append( *it );
	m_teams->SetSelection( 0 );
	bool found = false;
	for( unsigned int i = 0; i < m_data->m_players->size() && !found; i++ )
	{
		CPlayer player = m_data->m_players->at( i );
		if( !player.IsPlayerDrafted() )
		{
			m_draftPlayer->GetPlayerNameCtrl().SetValue( player.GetName() );
			found = true;
		}
	}
	SetTitle( wxString::Format( "ValueDraft - %s", m_data->m_settings->GetLeagueName() ) );
    m_label2->SetFont( wxFont( 8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxEmptyString ) );
    m_hittersDrafted->CreateGrid( hitters + 2, m_leagueScoringHitters.size() + 3 );
    m_label3->SetFont( wxFont( 8, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxEmptyString ) );
    m_pitchersDrafted->CreateGrid( pitchers + 2, m_leagueScoringPitchers.size() + 3 );
	m_hittersDrafted->BeginBatch();
	m_hittersDrafted->HideRowLabels();
	m_hittersDrafted->SetColLabelValue( 0, "Position" );
	m_hittersDrafted->SetColLabelValue( 1, "Player" );
	m_hittersDrafted->SetColLabelValue( 2, "Salary" );
	int i = 3, row = 0;
	for( std::vector<wxString>::iterator it = m_leagueScoringHitters.begin(); it < m_leagueScoringHitters.end(); it++, i++ )
		m_hittersDrafted->SetColLabelValue( i, *it );
	for( i = 0; i < m_positions["C"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "C" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["1B"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "1B" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["3B"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "3B" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["CI"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "CI" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["2B"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "2B" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["SS"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "SS" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["MI"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "MI" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["OF"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "OF" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	for( i = 0; i < m_positions["Utility"]; i++ )
	{
		m_hittersDrafted->SetCellValue( row, 0, "U" );
		m_hittersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	if( !m_data->m_settings->GetLeagueType() )
	{
		for( i = 0; i < m_positions["DH"]; i++ )
		{
			m_hittersDrafted->SetCellValue( row, 0, "DH" );
			m_hittersDrafted->SetReadOnly( row, 0 );
			row++;
		}
	}
	m_hittersDrafted->EnableEditing( false );
	m_hittersDrafted->SetCellRenderer( m_hittersDrafted->GetNumberRows() - 1, 0, new CGridTotalCell( "Edit" ) );
	m_hittersDrafted->SetReadOnly( m_hittersDrafted->GetNumberRows() - 1, 0 );
	m_hittersDrafted->SetCellFont( m_hittersDrafted->GetNumberRows() - 2, 1, m_hittersDrafted->GetCellFont( m_hittersDrafted->GetNumberRows() - 2, 1 ).Bold() );
	m_hittersDrafted->SetCellValue( m_hittersDrafted->GetNumberRows() - 2, 1, "Totals" );
	m_hittersDrafted->SetReadOnly( m_hittersDrafted->GetNumberRows() - 2, 1 );
	m_hittersDrafted->SetCellValue( m_hittersDrafted->GetNumberRows() - 1, 1, "Target" );
	m_hittersDrafted->SetReadOnly( m_hittersDrafted->GetNumberRows() - 1, 1 );
	m_hittersDrafted->AutoSize();
	m_hittersDrafted->DisableDragColSize();
	m_hittersDrafted->DisableDragRowSize();
	m_hittersDrafted->EndBatch();
	m_pitchersDrafted->BeginBatch();
	m_pitchersDrafted->HideRowLabels();
	m_pitchersDrafted->SetColLabelValue( 0, "Position" );
	m_pitchersDrafted->SetColLabelValue( 1, "Player" );
	m_pitchersDrafted->SetColLabelValue( 2, "Salary" );
	i = 3;
	for( std::vector<wxString>::iterator it = m_leagueScoringPitchers.begin(); it < m_leagueScoringPitchers.end(); it++, i++ )
		m_pitchersDrafted->SetColLabelValue( i, *it );
	row = 0;
	for( i = 0; i < m_positions["P"]; i++ )
	{
		m_pitchersDrafted->SetCellValue( row, 0, "P" );
		m_pitchersDrafted->SetReadOnly( row, 0 );
		row++;
	}
	if( !m_data->m_settings->GetLeagueType() )
	{
		for( i = 0; i < m_positions["SP"]; i++ )
		{
			m_pitchersDrafted->SetCellValue( row, 0, "SP" );
			m_pitchersDrafted->SetReadOnly( row, 0 );
			row++;
		}
		for( i = 0; i < m_positions["RP"]; i++ )
		{
			m_pitchersDrafted->SetCellValue( row, 0, "RP" );
			m_pitchersDrafted->SetReadOnly( row, 0 );
			row++;
		}
	}
	m_pitchersDrafted->EnableEditing( false );
	m_pitchersDrafted->SetCellRenderer( m_pitchersDrafted->GetNumberRows() - 1, 0, new CGridTotalCell( "Edit" ) );
	m_pitchersDrafted->SetReadOnly( m_pitchersDrafted->GetNumberRows() - 1, 0 );
	m_pitchersDrafted->SetCellFont( m_pitchersDrafted->GetNumberRows() - 2, 1, m_pitchersDrafted->GetCellFont( m_pitchersDrafted->GetNumberRows() - 2, 1 ).Bold() );
	m_pitchersDrafted->SetCellValue( m_pitchersDrafted->GetNumberRows() - 2, 1, "Totals" );
	m_pitchersDrafted->SetReadOnly( m_pitchersDrafted->GetNumberRows() - 2, 1 );
	m_pitchersDrafted->SetCellValue( m_pitchersDrafted->GetNumberRows() - 1, 1, "Target" );
	m_pitchersDrafted->SetReadOnly( m_pitchersDrafted->GetNumberRows() - 1, 1 );
	m_pitchersDrafted->AutoSize();
	m_pitchersDrafted->DisableDragColSize();
	m_pitchersDrafted->DisableDragRowSize();
	m_pitchersDrafted->EndBatch();
	m_panel2->Hide();
	m_panel3->Hide();
	m_panel4->Hide();
	for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
	{
		CPlayer player = (*it);
		DisplayDraftedPlayer( player.IsHitter() ? m_hittersDrafted : m_pitchersDrafted, &player, -1 );
	}
	m_hittersDrafted->AutoSize();
	m_pitchersDrafted->AutoSize();
}

void CFrame::do_layout()
{
	wxBoxSizer *main = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *horizontal = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *vertical = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *divider = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *roster = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *rosterTop = new wxBoxSizer( wxHORIZONTAL );
	m_hitters_pitchersRoster = new wxBoxSizer( wxVERTICAL );
	m_teamRoster = new wxBoxSizer( wxVERTICAL );
	m_teamRosterBottom = new wxFlexGridSizer( 3, 4, 5, 15 );
	wxBoxSizer *draftSizer = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *draftPanelSizer = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *buttonSizer = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *statSizerTop = new wxBoxSizer( wxVERTICAL );
	m_panelSizer = new wxBoxSizer( wxHORIZONTAL );
	horizontal->Add( 5, 5, 1, wxEXPAND, 0 );
	vertical->Add( 5, 5, 1, wxEXPAND, 0 );
	rosterTop->Add( m_label1, 0, wxEXPAND | wxALIGN_CENTER_VERTICAL, 0 );
	rosterTop->Add( 5, 5, 0, wxEXPAND, 0 );
	rosterTop->Add( m_teams, 0, wxEXPAND | wxALIGN_CENTER_VERTICAL, 0 );
	rosterTop->Add( 5, 5, 0, wxEXPAND, 0 );
	rosterTop->Add( m_hideRoster, 0, wxEXPAND | wxALIGN_CENTER_VERTICAL, 0 );
	roster->Add( rosterTop, 0, wxEXPAND, 0 );
	roster->Add( 5, 5, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( m_label2, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( 5, 5, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( m_hittersDrafted, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( 5, 5, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( m_label3, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( 5, 5, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( m_pitchersDrafted, 0, wxEXPAND, 0 );
	m_hitters_pitchersRoster->Add( 5, 5, 0, wxEXPAND, 0 );
	m_teamRoster->Add( m_hitters_pitchersRoster, 0, wxEXPAND, 0 );
	m_teamRoster->Add( 5, 5, 0, wxEXPAND, 0 );
    m_teamRosterBottom->Add(m_label4, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_salaryLeft, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_label7, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_inflation, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_label5, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_playersLeft, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_label8, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_profit, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_label6, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_average, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_label9, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    m_teamRosterBottom->Add(m_maxBid, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
	m_teamRoster->Add( m_teamRosterBottom, 0, wxEXPAND, 0 );
	roster->Add( m_teamRoster, 0, wxEXPAND, 0 );
	divider->Add( roster, 0, wxEXPAND, 0 );
	divider->Add( 5, 5, 0, wxEXPAND, 0 );
	draftSizer->Add( m_draftPlayer, 1, wxEXPAND, 0 );
	draftPanelSizer->Add( draftSizer, 0, wxEXPAND, 0 );
	draftPanelSizer->Add( 5, 5, 0, wxEXPAND, 0 );
    buttonSizer->Add( m_playersData, 0, wxEXPAND, 0 );
	buttonSizer->AddStretchSpacer();
    buttonSizer->Add( m_rostersData, 0, wxEXPAND, 0 );
    buttonSizer->AddStretchSpacer();
    buttonSizer->Add( m_teamProjectionsData, 0, wxEXPAND, 0 );
    buttonSizer->AddStretchSpacer();
    buttonSizer->Add( m_draftResultsData, 0, wxEXPAND, 0 );
	statSizerTop->Add( buttonSizer, 0, wxEXPAND, 0 );
	statSizerTop->Add( 5, 5, 0, wxEXPAND, 0 );
	m_panelSizer->Add( m_panel1, 1, wxEXPAND, 0 );
	m_panelSizer->Add( m_panel2, 1, wxEXPAND, 0 );
	m_panelSizer->Add( m_panel3, 1, wxEXPAND, 0 );
	m_panelSizer->Add( m_panel4, 1, wxEXPAND, 0 );
	statSizerTop->Add( m_panelSizer, 1, wxEXPAND, 0 );
	draftPanelSizer->Add( statSizerTop, 1, wxEXPAND, 0 );
	divider->Add( draftPanelSizer, 1, wxEXPAND, 0 );
	vertical->Add( divider, 0, wxEXPAND, 0 );
	vertical->Add( 5, 5, 1, wxEXPAND, 0 );
	horizontal->Add( vertical, 1, wxEXPAND, 0 );
	horizontal->Add( 5, 5, 1, wxEXPAND, 0 );
	m_panel->SetSizerAndFit( horizontal );
	main->Add( m_panel, 0, wxEXPAND, 0 );
	SetSizerAndFit( main );
}

void CFrame::OnAddNewPlayer(wxCommandEvent &event)
{
	wxString title;
	bool isEdit;
	CPlayer *player;
	if( event.GetId() == wxMENU_EDIT_PLAYER )
	{
		player = contextMenuPlayer;
		title = "Edit Player";
		isEdit = true;
	}
	else
	{
		title = "Add New Player";
		player = NULL;
		isEdit = false;
	}
	CAddNewPlayer dlg( this, title, *(m_data->m_settings), player, m_data->m_players->size() );
	if( player )
	{
		dlg.SetOldRange( player->GetRange() );
		dlg.SetOldValue( player->GetValue() );
	}
	if( dlg.ShowModal() == wxID_OK )
	{
		if( !isEdit )
		{
			player = &(dlg.GetNewPlayer());
			bool found = false;
			for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !found; it++ )
			{
				if( !(*it).IsPlayerDeleted() && ( player->GetName() == (*it).GetName() && player->GetAge() == (*it).GetAge() && player->GetTeam() == (*it).GetTeam() ) )
				{
					found = true;
				}
			}
			if( found )
			{
				wxMessageBox( "Such player already exist in the league" );
				return;
			}
			wxString playerDropped = wxEmptyString;
			double value = player->GetValue();
			if( value > 0 )
			{
				PlayerSorter sorter;
				sorter.m_type.push_back( SortObject( SORT_BY_VALUE, true ) );
				sorter.m_type.push_back( SortObject( SORT_BY_RANGE, true ) );
				std::sort( m_data->m_players->begin(), m_data->m_players->end(), sorter );
				bool found = false;
				for( std::vector<CPlayer>::reverse_iterator it = m_data->m_players->rbegin(); it != m_data->m_players->rend() && !found; it++ )
				{
					if( (*it).IsPlayerDeleted() || (*it).IsPlayerDrafted() )
						continue;
					if( (*it).GetValue() > 0 )
					{
						playerDropped = (*it).GetName();
						found = true;
					}
				}
			}
/*				found = false;
				for( std::vector<CPlayer>::reverse_iterator it = m_data->m_players->rbegin(); it != m_data->m_players->rend() && !found; it++ )
				{
					if( (*it).IsPlayerDeleted() )
						continue;
					if( (*it).GetValue() == value )
					{
						changedRank = (*it).GetRange() + 1;
						found = true;
					}
					if( (*it).GetValue() > value )
					{
						changedRank = (*it).GetRange() + 1;
						found = true;
					}
				}
			}
			else if( value == 0 )
			{
				int pos = m_data->m_players->size() + 1;
				for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
				{
					if( (*it).IsPlayerDeleted() )
						pos--;
				}
				changedRank = pos;
//				player->SetRange( changedRank );
//				player->SetOriginalRange( changedRank );
			}
			player->SetRange( changedRank );
			player->SetOriginalRange( changedRank );
			int currentRank = m_data->m_players->size() + 1/*, changedRank = dlg.GetChangedRank()*/;
/*			if( currentRank > changedRank )
			{
				for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
				{
					if( (*it).IsPlayerDeleted() )
					{
						currentRank--;
						continue;
					}
					int range = (*it).GetRange();
					if( range >= changedRank && range < currentRank )
						(*it).SetRange( range + 1 );
				}
			}*/
			found = false;
			if( value > 0 )
			{
				for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !found; it++ )
				{
					if( (*it).GetName() == playerDropped )
					{
						found = true;
						(*it).SetValue( 0 );
						(*it).SetCurrentValue( 0.0 );
						m_panel1->SetPlayerToZero( playerDropped );
					}
				}
				int onedollarplayers = 0;
				for( std::vector<CPlayer>::reverse_iterator it = m_data->m_players->rbegin(); it != m_data->m_players->rend(); it++ )
				{
					if( (*it).GetCurrentValue() == 1 )
						onedollarplayers++;
				}
				double diff = - ( (double) ( value - 1 ) / ( m_availablePlayers - m_draftResult.size() - onedollarplayers ) );
				wxBeginBusyCursor();
				m_panel1->RecalculatePlayersValue( diff, isEdit, player, playerDropped, (double) value );
				wxEndBusyCursor();
			}
			else
			{
				double diff = 0;
				m_zeroRanked++;
				wxBeginBusyCursor();
				m_panel1->RecalculatePlayersValue( diff, isEdit, player, playerDropped, (double) value );
				wxEndBusyCursor();
			}
			m_draftPlayer->AddPlayer( *player );
			delete player;
		}
		else
		{
			bool isDrafted = player->IsPlayerDrafted();
/*			if( !isDrafted )
			{
				if( player->GetValue() == dlg.GetChangedCurrentValue() )
					return;
			}
			else
			{
				if( player->GetAmountPaid() == dlg.GetChangedAmountPaid() )
					return;
			}*/
			double diff = 0;
			double value = 0.0;
			long val = 0;
			wxString name;
			int id;
			if( !isDrafted )
			{
				double currentValue = player->GetValue(), changedValue = dlg.GetChangedCurrentValue();
				int currentRank = player->GetRange(), changedRank = dlg.GetChangedRank();
				if( currentValue > 0 && changedValue == 0 && m_zeroRanked == 0 )
				{
					wxMessageBox( "Cannot edit player. This edit would violate the minimum number of players with value. Add a new player", "Error", wxID_OK | wxICON_EXCLAMATION );
					return;
				}
//				std::vector<SortObject> oldSorter = m_panel1->GetSorter().m_type;
//				m_panel1->GetSorter().m_type.clear();
				PlayerSorter sorter;
				sorter.m_type.push_back( SortObject( SORT_BY_VALUE, true ) );
				sorter.m_type.push_back( SortObject( SORT_BY_RANGE, true ) );
				std::sort( m_data->m_players->begin(), m_data->m_players->end(), sorter );
				if( currentRank < changedRank )
				{
					for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
					{
						int range = (*it).GetRange();
						if( range == currentRank && (*it).GetName() == player->GetName() && (*it).GetAge() == player->GetAge() && (*it).GetTeam() == player->GetTeam() )
							(*it).SetRange( changedRank );
						if( range > currentRank && range <= changedRank && (*it).GetName() != player->GetName() )
							(*it).SetRange( range - 1 );
					}
				}
				if( currentRank > changedRank )
				{
					for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
					{
						int range = (*it).GetRange();
						if( range >= changedRank && range < currentRank )
							(*it).SetRange( range + 1 );
						if( range == currentRank )
							(*it).SetRange( changedRank );
					}
				}
				if( changedValue == 0 && currentValue == 0 )
					diff = 0;
				if( changedValue > 0 && currentValue > 0 )
				{
					if( changedValue > currentValue )
					{
						DoEditPlayerFromZero( -1, 0, changedValue, player, POSITIVE_DIFF, 0 );
						diff = -( changedValue - currentValue );
					}
					else
					{
						DoEditPlayerFromZero( -1, 0, changedValue, player, NEGATIVE_DIFF, 0 );
						diff = currentValue - changedValue;
					}
/*					value = changedValue - currentValue;
					diff = value / ( m_availablePlayers - m_draftResult.size() );
					player->SetValue( changedValue );*/
				}
				if( currentValue == 0 && changedValue > 0 )
				{
					bool found = false;
					double droppedValue;
					for( std::vector<CPlayer>::reverse_iterator it = m_data->m_players->rbegin(); it < m_data->m_players->rend()&& !found; it++ )
					{
						if( (*it).GetValue() > 0 && !(*it).IsPlayerDrafted() && !(*it).IsPlayerDeleted() )
						{
							name = (*it).GetName();
							id = (*it).GetPlayerId();
							droppedValue = (*it).GetValue();
							(*it).SetRange( (*it).GetRange() + 1 );
							(*it).SetValue( 0.0 );
							(*it).SetCurrentValue( 0.0 );
							found = true;
						}
					}
					DoEditPlayerFromZero( id, 0, changedValue, player, NEGATIVE_DIFF, droppedValue );
					diff = currentValue - changedValue;
				}
				if( currentValue > 0 && changedValue == 0 )
				{
					int playerDroppedValue = 1;
					int droppedPlayerName;
					bool found = false;
					for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !found; it++ )
					{
						if( (*it).GetValue() == 0.0 && !(*it).IsPlayerDrafted() && !(*it).IsPlayerDeleted() )
						{
							found = true;
							(*it).SetValue( 1.0 );
							(*it).SetCurrentValue( 1.0 * m_inflationRatio );
							player->SetRange( (*it).GetRange() );
							(*it).SetRange( (*it).GetRange() - 1 );
							droppedPlayerName = (*it).GetPlayerId();
						}
					}
					DoEditPlayerFromZero( droppedPlayerName, playerDroppedValue, ( playerDroppedValue - currentValue ), player, NEGATIVE_DIFF, 0.0 );
/*					if( playerDroppedValue > currentValue )
					{
						DoEditPlayerFromZero( droppedPlayerName, playerDroppedValue, ( playerDroppedValue - currentValue ), player, NEGATIVE_DIFF, 0.0 );
						diff = -( playerDroppedValue - currentValue );
					}
					if( playerDroppedValue < currentValue )
					{
//						DoEditPlayerFromZero( droppedPlayerName, playerDroppedValue, ( currentValue - playerDroppedValue ), player, POSITIVE_DIFF );
						diff = ( playerDroppedValue - currentValue );
					}
					if( playerDroppedValue == currentValue )
					{
						for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
						{
							if( (*it).GetName() == name )
							{
								(*it).SetValue( playerDroppedValue );
								(*it).SetCurrentValue( (double) playerDroppedValue );
							}
							if( (*it).GetName() == player->GetName() )
							{
								(*it).SetValue( 0 );
								(*it).SetCurrentValue( (double) 0 );
							}
						}
					}*/
				}
//				sorter.m_type = oldSorter;
//				std::sort( m_data->m_players->begin(), m_data->m_players->end(), sorter );
			}
			else
			{
				int salaryLeft = wxAtoi( m_salaryLeft->GetLabel().substr( 1 ) );
				val = dlg.GetChangedAmountPaid() - player->GetAmountPaid();
				m_salaryLeft->SetLabel( wxString::Format( "$%d", salaryLeft - val ) );
				int playersLeft = wxAtoi( m_playersLeft->GetLabel() );
				m_average->SetLabel( wxString::Format( "$%.2f", (double) ( salaryLeft - val ) / (double ) playersLeft ) );
				int profit = wxAtoi( m_profit->GetLabel() );
				m_profit->SetLabel( wxString::Format( "$%d", profit - val ) );
				m_maxBid->SetLabel( wxString::Format( "%d", ( salaryLeft - val ) - ( playersLeft - 1 ) ) );
/*				double sumValue = 0, sumPaid = 0;
				for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
				{
					sumValue += (*it).GetValue();
					sumPaid += (*it).GetAmountPaid();
				}*/
//				double inflation = m_budget / ( m_budget - sum );
				m_budgetPaid -= dlg.GetChangedAmountPaid() - player->GetAmountPaid();
				m_inflationRatio = m_budgetPaid / m_budgetValue;
				m_inflation->SetLabel( wxString::Format( "%.2f", m_inflationRatio) );
//				m_budget -= player->GetAmountPaid();
/*				diff = (double) val / ( m_availablePlayers - m_draftResult.size() );
				m_budget -= val;*/
				player->SetAmountPaid( dlg.GetChangedAmountPaid() );
			}
			player->SetAge( dlg.GetChangedAge() );
			player->SetTeam( dlg.GetChangedTeam()  );
			player->SetAbbreviatedTeam( dlg.GetChangedAbbreviatedTeam() );
			player->ClearPositions();
			player->SetPosition( dlg.GetChangedPositions() );
			player->SetScore( dlg.GetScoring() );
//			if( value > 0 )
//				diff = -diff;
			m_panel1->RecalculatePlayersValue( diff, isEdit, player, name, value == 0.0 ? (double) val : value );
			if( m_draftPlayer->GetPlayerNameCtrl().GetValue() == player->GetName() )
				m_draftPlayer->UpdatePlayer( *player );
		}
		m_dirty = dlg.PlayerAddedModified();
		if( !isEdit )
			wxMessageBox( "Player added successfully!" );
		if( isEdit)
			wxMessageBox( "Player edited successfully!" );
	}
}

void CFrame::OnDeletePlayer(wxCommandEvent &WXUNUSED(event))
{
	int res = wxMessageBox( "Are you sure you want to delete " + contextMenuPlayer->GetName() + "?", "Warning", wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION );
	if( res == wxYES )
	{
		m_dirty = true;
		if( contextMenuPlayer->GetValue() > 0 )
			m_availablePlayers--;
		else
			m_zeroRanked--;
		contextMenuPlayer->DeletePlayer( true );
		int deletedRank = contextMenuPlayer->GetRange();
		for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
		{
			if( (*it).GetRange() > deletedRank )
				(*it).SetRange( (*it).GetRange() - 1 );
		}
		for( std::vector<CPlayer>::iterator it1 = m_panel1->GetCompleter().GetPlayers().begin(); it1 < m_panel1->GetCompleter().GetPlayers().end(); it1++ )
		{
			if( (*it1).GetRange() == deletedRank )
				(*it1).DeletePlayer( true );
			if( (*it1).GetRange() > deletedRank )
				(*it1).SetRange( (*it1).GetRange() -1 );
		}
		for( std::vector<CPlayer>::iterator it2 = m_draftPlayer->GetCompleter().GetPlayers().begin(); it2 < m_draftPlayer->GetCompleter().GetPlayers().end(); it2++ )
		{
			if( (*it2).GetRange() == deletedRank )
				(*it2).DeletePlayer( true );
			if( (*it2).GetRange() > deletedRank )
				(*it2).SetRange( (*it2).GetRange() -1 );
		}
		m_panel1->DeletePlayer( *contextMenuPlayer );
		wxMessageBox( "Player Deleted" );
	}
}

int CFrame::LoadLeagueData(CLeagueSettings *league, const CDb &db, CLeagueData &data, const wxString &name, const wxLongLong_t leagueID, int &numPlayers, std::vector<CPlayer> &draftResult, int &zeroRanked)
{
	wxBusyCursor cursor;
	int result = SQLITE_OK;
	wxLongLong_t leagueId;
	if( !league )
	{
		league = new CLeagueSettings( name );
		data.m_settings = league;
		result = const_cast<CDb &>( db ).LoadLeagueData( league, leagueId );
	}
	else
	{
		data.m_settings = league;
		leagueId = leagueID;
	}
	if( result != SQLITE_OK )
		return result;
	const_cast<CDb &>( db ).GetPlayersForLeague( data, leagueId, numPlayers, draftResult, zeroRanked );
	m_leagueId = leagueId;
	return SQLITE_OK;
}

void CFrame::OnHittersEdit(wxGridEvent &event)
{
	wxWindow *focus = FindFocus();
	if( event.GetRow() == dynamic_cast<wxGrid *>( event.GetEventObject() )->GetNumberRows() - 1 && event.GetCol() == 0 )
		wxMessageBox( "Button was clicked!" );
	focus->SetFocus();
}

void CFrame::OnPitchersEdit(wxGridEvent &event)
{
	wxWindow *focus = FindFocus();
	if( event.GetRow() == dynamic_cast<wxGrid *>( event.GetEventObject() )->GetNumberRows() - 1 && event.GetCol() == 0 )
		wxMessageBox( "Button was clicked!" );
	focus->SetFocus();
}

void CFrame::OnDraftPerformed(wxCommandEvent &WXUNUSED(event))
{
	bool found = false;
	wxString name, position, owner;
	int value;
	m_draftPlayer->GetDraftedPlayer( name, position, owner, value );
	if( name.IsEmpty() )
	{
		wxMessageBox( "Please enter a player's name to draft" );
		m_draftPlayer->GetPlayerNameCtrl().SetFocus();
		return;
	}
	if( owner.IsEmpty() )
	{
		wxMessageBox( "Please select the owner for the drafted player" );
		m_draftPlayer->GetOwnerCtrl().SetFocus();
		return;
	}
	if( value > m_maxBidValue[owner] )
	{
		wxMessageBox( "Cannot draft player. Amount Paid exceeds Max Bid" );
		m_draftPlayer->GetAmountPaidCtrl().SetFocus();
		return;
	}
	CPlayer player;
	wxMessageDialog dlg( NULL, "Player - " + name + "\r\nOwner - " + owner + "\r\nAmount Paid - " + wxString::Format( "%d", m_draftPlayer->GetAmountPaid() ) + "\r\nPosition - " + position, "Drafting", wxOK | wxCANCEL | wxCENTRE );
	dlg.SetOKLabel( "Confirm" );
	if( dlg.ShowModal() == wxID_CANCEL )
		return;
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !found; it++ )
	{
		if( (*it).GetName() == name )
		{
			bool slotFound = false;
			int playersCount = 0;
			std::vector<CPlayer>::iterator iterat;
			if( !(*it).IsHitter() && m_data->m_settings->GetLeagueType() )
				position = "P";
			for( iterat = m_draftResult.begin(); iterat < m_draftResult.end(); iterat++ )
			{
				if( (*iterat).GetOwner() == owner && (*iterat).GetDraftedPosition() == position )
					playersCount++;
			}
			if( playersCount < m_data->m_settings->GetPositions()[position] )
				slotFound = true;
			if( !slotFound )
			{
				wxMessageBox( "Position already taken. Please select another position", "Error" );
				m_draftPlayer->GetPositionCtrl().SetFocus();
				return;
			}
			(*it).SetOwner( owner );
			m_totalSpent += m_draftPlayer->GetAmountPaid();
			m_draftedBeginValue += (*it).GetValue();
			(*it).SetAmountPaid( m_draftPlayer->GetAmountPaid() );
			(*it).SetDraftedPosition( position );
			(*it).DraftPlayer( true );
			(*it).SetDraftOrder( m_draftResult.size() + 1 );
			(*it).SetCurrentValue( (*it).GetAmountPaid() );
			player = (*it);
			m_draftResult.push_back( (*it) );
			DoDraftPlayer( (*it), owner, name );
			found = true;
		}
	}
	m_draftPlayer->DraftCompleted();
	m_dirty = true;
	wxMessageBox( "Player drafted successfully!" );
}

void CFrame::OnHideShowteamRoster(wxCommandEvent &WXUNUSED(event))
{
	if( m_rosterDisplayed )
	{
		m_teamRoster->Hide( m_hitters_pitchersRoster, TRUE );
		m_teamRoster->Hide( m_teamRosterBottom, TRUE );
		m_teamRoster->Hide( m_teamRosterBottom, true );
		m_hideRoster->SetLabel( "Show" );
	}
	else
	{
		m_teamRoster->Show( m_hitters_pitchersRoster, TRUE );
		m_teamRoster->Show( m_teamRosterBottom, TRUE );
		m_teamRoster->Show( m_teamRosterBottom, true );
		m_hideRoster->SetLabel( "Hide" );
	}
	Layout();
	m_rosterDisplayed = !m_rosterDisplayed;
}

void CFrame::OnRosterGridCellChange(wxGridEvent &event)
{
	CMyGrid *grid = dynamic_cast<CMyGrid *>( event.GetEventObject() );
	int rows = grid->GetNumberRows() - 2;
	int col = event.GetCol();
	double sum = 0, value;
	for( int i = 0; i < rows; i++ )
	{
		wxString val = grid->GetCellValue( i, col );
		val.ToDouble( &value );
		sum += value;
	}
}

void CFrame::OnSelectingOwner(wxCommandEvent &WXUNUSED(event))
{
	CMyGrid *grid;
	int i, j;
	if( m_draftResult.size() == 0 )
	{
		wxMessageBox( "No draft were performed. Nothing to display!" );
		return;
	}
	if( m_oldOwner != wxEmptyString )
	{
		m_hittersDrafted->BeginBatch();
		for( i = 1; i < m_hittersDrafted->GetNumberCols(); i++ )
		{
			for( j = 0; j < m_hittersDrafted->GetNumberRows(); j++ )
			{
				int numRows = m_hittersDrafted->GetNumberRows();
				if( j < numRows - 2 || ( j >= numRows - 2 && i >= 2 ) )
					m_hittersDrafted->SetCellValue( j, i, "" );
			}
		}
		m_hittersDrafted->EndBatch();
		m_pitchersDrafted->BeginBatch();
		for( i = 1; i < m_pitchersDrafted->GetNumberCols(); i++ )
		{
			for( j = 0; j < m_pitchersDrafted->GetNumberRows(); j++ )
			{
				int numRows = m_pitchersDrafted->GetNumberRows();
				if( j < numRows - 2 || ( j >= numRows - 2 && i >= 2 ) )
					m_pitchersDrafted->SetCellValue( j, i, "" );
			}
		}
		m_pitchersDrafted->EndBatch();
	}
	DisplayOwnerParameters( CalculateHitters(), CalculatePitchers() );
	bool displayed = false;
	wxString name = m_teams->GetValue();
	std::vector<CPlayer>::iterator it;
	int count = 0;
	int salaryLeft = 0, playersLeft = 0;
	double profit = 0.0;
	for( it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
	{
		if( (*it).GetOwner() == name )
		{
			if( (*it).IsHitter() )
				grid = m_hittersDrafted;
			else
				grid = m_pitchersDrafted;
			for( int i = 0; i < grid->GetNumberRows() && !displayed; i++ )
			{
				wxString position = grid->GetCellValue( i, 0 );
				wxString name = grid->GetCellValue( i, 1 );
				if( (*it).GetDraftedPosition() == position && name.IsEmpty() )
				{
					DisplayDraftedPlayer( grid, &(*it), i );
					displayed = true;
				}
			}
			displayed = false;
			count++;
			profit += (*it).GetValue() - (*it).GetAmountPaid();
		}
	}
	double average = (double) m_leagueSalary[name] / (double) m_playersLeftInLeague[name];
	m_salaryLeft->SetLabel( wxString::Format( "$%d", m_leagueSalary[name] ) );
	m_playersLeft->SetLabel( wxString::Format( "%d", m_playersLeftInLeague[name] ) );
	m_average->SetLabel( wxString::Format( "%.2f", average ) );
	m_maxBid->SetLabel( wxString::Format( "$%d", m_maxBidValue[name] ) );
	m_profit->SetLabel( wxString::Format( "%.2f", profit ) );
	m_oldOwner = name;
}

void CFrame::DisplayDraftedPlayer(CMyGrid *grid, CPlayer *player, int row)
{
	int col, rowNumber = grid->GetNumberRows();
	if( row == -1 )
	{
		for( int i = 0; i < rowNumber && row == -1; i++ )
		{
			if( grid->GetCellValue( i, 0 ) == player->GetDraftedPosition() && grid->GetCellValue( i, 1 ).IsEmpty() )
				row = i;
		}
	}
	grid->BeginBatch();
	grid->SetCellValue( row, 1, player->GetName() );
	grid->AutoSizeColumn( 1 );
	grid->SetCellValue( row, 2, wxString::Format( "%d", player->GetAmountPaid() ) );
	grid->AutoSizeColumn( 2 );
	for( col = 3; col < grid->GetNumberCols(); col++ )
	{
		wxString label = grid->GetColLabelValue( col ), score;
		if( label == "AVG" || label == "OBP" ||	label == "SLG" || label == "OPS" || label == "K/9" || label == "H/9" || label == "BB/9" ||
			label == "K/BB" || label == "K-BB" || label == "Holds" || label == "G" || label == "R" || label == "hr" )
			score = wxString::Format( "%.3f", player->GetScoring()[label] );
		else if( label == "ERA" || label == "WHIP" || label == "K" )
			score = wxString::Format( "%.2f", player->GetScoring()[label] );
		else if( label == "W%" )
			score = wxString::Format( "%.2f%%", player->GetScoring()[label] );
		else if( label == "IP" )
			score = wxString::Format( "%.1f", player->GetScoring()[label] );
		else
			score << player->GetScoring()[label];
		grid->SetCellValue( row, col, score );
		grid->AutoSizeColumn( col );
	}
	for( col = 2; col < grid->GetNumberCols(); col++ )
	{
		double sum = 0;
		for( int row = 0; row < grid->GetNumberRows() - 2; row++ )
		{
			double value;
			wxString val = grid->GetCellValue( row, col );
			if( val.IsEmpty() )
				value = 0;
			else
				val.ToDouble( &value );
			sum += value;
		}
		wxString label = grid->GetColLabelValue( col ), score;
		if( label == "AVG" || label == "OBP" ||	label == "SLG" || label == "OPS" || label == "K/9" || label == "H/9" || label == "BB/9" ||
			label == "K/BB" || label == "K-BB" || label == "Holds" || label == "G" || label == "R" || label == "hr" )
			score = wxString::Format( "%.3f", player->GetScoring()[label] );
		else if( label == "ERA" || label == "WHIP" || label == "K" )
			score = wxString::Format( "%.2f", sum );
		else if( label == "W%" )
			score = wxString::Format( "%.2f%%", sum );
		else if( label == "IP" )
			score = wxString::Format( "%.1f", sum );
		else if( label == "Salary" )
			score = wxString::Format( "%.0f", sum );
		else
			score << sum;
		grid->SetCellValue( rowNumber - 2, col, score );
	}
	grid->EndBatch();
}

void CFrame::OnExit(wxCommandEvent &WXUNUSED(event))
{
	Close( true );
}

void CFrame::DisplayOwnerParameters(int hitters, int pitchers)
{
	m_salaryLeft->SetLabel( wxString::Format( "$%d", m_data->m_settings->GetSalary() ) );
	m_playersLeft->SetLabel( wxString::Format( "%d", hitters + pitchers ) );
	m_profit->SetLabel( "0" );
	m_average->SetLabel( wxString::Format( "%.2f", (double) m_data->m_settings->GetSalary() / (double) ( hitters + pitchers ) ) );
	m_maxBid->SetLabel( wxString::Format( "$%d", m_data->m_settings->GetSalary() - ( ( hitters + pitchers ) - 1 ) ) );
}

int CFrame::CalculateHitters()
{
	int hitters = m_positions["C"] + m_positions["1B"] + m_positions["3B"] + m_positions["CI"] + m_positions["2B"] + m_positions["SS"] + m_positions["MI"] + m_positions["OF"] + m_positions["Utility"];
	if( !m_data->m_settings->GetLeagueType() )
		hitters += m_positions["DH"];
	return hitters;
}

int CFrame::CalculatePitchers()
{
	int pitchers = m_positions["P"];
	if( !m_data->m_settings->GetLeagueType() )
	{
		pitchers += m_positions["SP"];
		pitchers += m_positions["RP"];
	}
	return pitchers;
}

std::vector<CPlayer> &CFrame::GetDraftResult()
{
	return m_draftResult;
}

void CFrame::OnDisplayRoster(wxCommandEvent &WXUNUSED(event))
{
	m_panel1->Hide();
	m_panel2->Show();
	m_panel3->Hide();
	m_panel4->Hide();
	m_panelSizer->Layout();
	m_panel2->GetRosterControl().AdjustScrollbars();
}

void CFrame::OnDisplayProjections(wxCommandEvent &WXUNUSED(event))
{
	m_panel1->Hide();
	m_panel2->Hide();
	m_panel3->Show();
	m_panel4->Hide();
	m_panelSizer->Layout();
}

void CFrame::OnDisplayPlayersData(wxCommandEvent &WXUNUSED(event))
{
	m_panel1->Show();
	m_panel2->Hide();
	m_panel3->Hide();
	m_panel4->Hide();
	m_panelSizer->Layout();
}

void CFrame::OnDraftResult(wxCommandEvent &WXUNUSED(event))
{
	m_panel1->Hide();
	m_panel2->Hide();
	m_panel3->Hide();
	m_panel4->Show();
	m_panelSizer->Layout();
}

void CFrame::OnEditTargets(wxCommandEvent &WXUNUSED(event))
{
	std::vector<wxString>::iterator it;
	std::map<wxString,double>::iterator it1, it2;
	int row1 = m_hittersDrafted->GetNumberRows() - 1, row2 = m_pitchersDrafted->GetNumberRows() - 1, col;
	CEditTargets dlg( this, *m_data );
	if( dlg.ShowModal() == wxID_OK )
	{
		for( it = m_data->m_settings->GetHitScoring().begin(); it < m_data->m_settings->GetHitScoring().end(); it++ )
			m_data->m_settings->AddTargetHitter( (*it), dlg.GetHitTarget( (*it) ) );
		for( it = m_data->m_settings->GetPitchScoring().begin(); it < m_data->m_settings->GetPitchScoring().end(); it++ )
			m_data->m_settings->AddTargetPitchers( (*it), dlg.GetPitchTarget( (*it) ) );
		for( col = 2; col < m_hittersDrafted->GetNumberCols(); col++ )
		{
			for( it1 = m_data->m_settings->GetTargetsForHitters().begin(); it1 != m_data->m_settings->GetTargetsForHitters().end(); it1++ )
				if( m_hittersDrafted->GetColLabelValue( col ) == (*it1).first && (*it1).second > 0 )
					m_hittersDrafted->SetCellValue( row1, col, wxString::Format( "%.3f", (*it1).second ) );
		}
		for( col = 2; col < m_pitchersDrafted->GetNumberCols(); col++ )
		{
			for( it2 = m_data->m_settings->GetTargetsForPitchers().begin(); it2 != m_data->m_settings->GetTargetsForPitchers().end(); it2++ )
				if( m_pitchersDrafted->GetColLabelValue( col ) == (*it2).first && (*it2).second > 0 )
					m_pitchersDrafted->SetCellValue( row2, col, wxString::Format( "%.3f", (*it2).second ) );
		}
	}
}

void CFrame::OnContextMenu(wxGridEvent &event)
{
	wxMenu menu;
	wxGrid *grid = dynamic_cast<wxGrid *>( event.GetEventObject() );
	wxWindow *panel = grid->GetParent();
	if( grid->GetParent()->IsKindOf( CLASSINFO( CTeamsRoster ) ) && event.GetRow() < 4 )
		return;
	wxString value = grid->GetCellValue( event.GetRow(), event.GetCol() );
	if( grid->GetParent()->IsKindOf( CLASSINFO( CPlayersPanel ) ) || !value.IsEmpty() )
	{
		if( grid->GetParent()->IsKindOf( CLASSINFO( CPlayersPanel ) ) )
		{
			m_panel1->SetSelectionToRow( event.GetRow() );
			for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
				if( (*it).GetName() == grid->GetCellValue( event.GetRow(), 1 ) )
					contextMenuPlayer = &(*it);
		}
		else if( grid->IsKindOf( CLASSINFO( CMyGrid ) ) )
		{
			for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
				if( (*it).GetName() == grid->GetCellValue( event.GetRow(), 1 ) )
					contextMenuPlayer = &(*it);
		}
		else
		{
			wxString value = grid->GetCellValue( event.GetRow(), event.GetCol() );
			wxString name = value.substr( value.find( ' ' ) + 1 );
			for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
				if( (*it).GetName() == name )
					contextMenuPlayer = &(*it);
		}
		grid->GoToCell( event.GetRow(), event.GetCol() );
		grid->SelectRow( event.GetRow() );
		menu.Append( wxMENU_EDIT_PLAYER, "Edit Player" );
		if( !grid->IsKindOf( CLASSINFO( CMyGrid ) ) && !panel->IsKindOf( CLASSINFO( CTeamsRoster ) ) && !contextMenuPlayer->IsPlayerDrafted() )
		{
			menu.Append( wxMENU_DRAFT_PLAYER, "Draft Player" );
			menu.Append( wxMENU_DELETE_PLAYER, "Delete Player" );
		}
		else
		{
			menu.Append( wxMENU_UNASSIGN_PLAYER, "Un-Assign" );
			menu.Append( wxMENU_DELETE_PLAYER, "Delete Player" );
			menu.Enable( wxMENU_DELETE_PLAYER, false );
		}
		PopupMenu( &menu );
	}
}

void CFrame::OnUnAssignPlayer(wxCommandEvent &WXUNUSED(event))
{
	int response = wxMessageBox( "Do you want to unassign player?", "Warning", wxOK | wxCANCEL | wxCANCEL_DEFAULT | wxICON_EXCLAMATION );
	if( response == wxOK )
	{
		wxBeginBusyCursor();
		DoUnAssignPlayer( true );
		wxEndBusyCursor();
		wxMessageBox( "Unassign Player Successful!", "Unassign Player", wxOK );
	}
	m_dirty = true;
}

void CFrame::DoUnAssignPlayer(bool doErase)
{
	m_availablePlayers++;
	wxString name = contextMenuPlayer->GetName();
	int draftOrder = 0;
	if( contextMenuPlayer->GetOwner() == m_teams->GetValue() )
	{
		bool found = false;
		int row = 0, i;
		wxGrid *grid = NULL;
		wxString position = contextMenuPlayer->GetDraftedPosition();
		int lastRow;
		if( position == "P" || position == "RP" || position == "SP" )
		{
			for( i = 0; i < m_pitchersDrafted->GetNumberRows() && !found; i++ )
				if( m_pitchersDrafted->GetCellValue( i, 1 ) == name && m_pitchersDrafted->GetCellValue( i, 0 ) == position )
				{
					found = true;
					row = i;
					grid = m_pitchersDrafted;
				}
		}
		else
		{
			for( i = 0; i < m_hittersDrafted->GetNumberRows() && !found; i++ )
				if( m_hittersDrafted->GetCellValue( i, 1 ) == name && m_hittersDrafted->GetCellValue( i, 0 ) == position )
				{
					found = true;
					row = i;
					grid = m_hittersDrafted;
				}
		}
		lastRow = grid->GetNumberRows() - 2;
		for( i = 1; i < grid->GetNumberCols(); i++ )
		{
			if( i == 1 )
				grid->SetCellValue( row, 1, wxEmptyString );
			else
			{
				wxString label = grid->GetColLabelValue( i );
				wxString score;
				double sum = wxAtoi( grid->GetCellValue( lastRow, i ) );
				double value = wxAtoi( grid->GetCellValue( row, i ) );
				sum -= value;
				if( sum == 0 )
					grid->SetCellValue( lastRow, i, wxEmptyString );
				else
				{
					if( label == "AVG" || label == "OBP" || label == "SLG" || label == "OPS" || label == "K/9" || label == "H/9" ||
						label == "BB/9" || label == "K/BB" || label == "K-BB" || label == "Holds" || label == "G" ||
						label == "R" ||	label == "hr" )
					{
						score = wxString::Format( "%.3f", sum );
					}
					else if( label == "ERA" || label == "WHIP" || label == "K" )
					{
						score = wxString::Format( "%.2f", sum );
					}
					else if( label == "W%" )
						score = wxString::Format( "%.2f%%", sum );
					else if( label == "IP" )
						score = wxString::Format( "%.1f", sum );
					else
						score << sum;
					if( score.StartsWith( "0." ) )
						score = score.substr( 1 );
					grid->SetCellValue( lastRow, i, score );
				}
				grid->SetCellValue( row, i, wxEmptyString );
			}
		}
	}
	m_panel2->UnAssignPlayer( *contextMenuPlayer );
	m_panel3->UnAssignPlayer( *contextMenuPlayer );
	m_panel4->UnAssignPlayer( *contextMenuPlayer );
	m_totalSpent -= contextMenuPlayer->GetAmountPaid();
	m_valueLeft += contextMenuPlayer->GetValue();
	CPlayer player = *contextMenuPlayer;
	int order = player.GetDraftOrder();
	for( std::vector<CPlayer>::iterator it_new = m_draftPlayer->GetCompleter().GetPlayers().begin(); it_new < m_draftPlayer->GetCompleter().GetPlayers().end(); it_new++ )
	{
		if( (*it_new).GetName() == name )
		{
			(*it_new).DraftPlayer( false );
			(*it_new).SetOwner( wxEmptyString );
			(*it_new).SetDraftOrder( 0 );
			(*it_new).SetAmountPaid( 0 );
		}
		else
		{
			int tempOrder = (*it_new).GetDraftOrder();
			if( tempOrder > order )
				(*it_new).SetDraftOrder( tempOrder - 1 );
		}
	}
	for( std::vector<CPlayer>::iterator it_new = m_panel1->GetCompleter().GetPlayers().begin(); it_new < m_panel1->GetCompleter().GetPlayers().end(); it_new++ )
	{
		if( (*it_new).GetName() == name )
		{
			(*it_new).DraftPlayer( false );
			(*it_new).SetOwner( wxEmptyString );
			(*it_new).SetDraftOrder( 0 );
			(*it_new).SetAmountPaid( 0 );
		}
		else
		{
			int tempOrder = (*it_new).GetDraftOrder();
			if( tempOrder > order )
				(*it_new).SetDraftOrder( tempOrder - 1 );
		}
	}
	wxString currentOwner = m_teams->GetValue();
	wxString playerOwner = contextMenuPlayer->GetOwner();
	m_leagueSalary[playerOwner] += contextMenuPlayer->GetAmountPaid();
	m_playersLeftInLeague[playerOwner]++;
	m_maxBidValue[playerOwner] += ( contextMenuPlayer->GetAmountPaid() + 1 );
	if( currentOwner == playerOwner )
	{
		m_salaryLeft->SetLabel( wxString::Format( "$%d", m_leagueSalary[playerOwner] ) );
		double profit = contextMenuPlayer->GetValue() - contextMenuPlayer->GetAmountPaid();
		double prof;
		m_profit->GetLabel().ToDouble( &prof );
		m_profit->SetLabel( wxString::Format( "%.2f", prof - profit ) );
		m_playersLeft->SetLabel( wxString::Format( "%d", m_playersLeftInLeague[playerOwner] ) );
		m_average->SetLabel( wxString::Format( "%.2f", (double) m_leagueSalary[playerOwner] / (double) m_playersLeftInLeague[playerOwner] ) );
		m_maxBid->SetLabel( wxString::Format( "$%d", m_maxBidValue[playerOwner] ) );
	}
//	m_budget += player.GetAmountPaid();
	for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
	{
		if( (*it).GetName() == name && (*it).GetOwner() == contextMenuPlayer->GetOwner() )
		{
			draftOrder = (*it).GetDraftOrder();
			if( doErase )
				m_draftResult.erase( it );
			break;
		}
		else
		{
			int tempOrder = (*it).GetDraftOrder();
			if( tempOrder > order )
				(*it).SetDraftOrder( tempOrder - 1 );
		}
	}
	m_budgetPaid += contextMenuPlayer->GetAmountPaid();
	m_budgetValue += contextMenuPlayer->GetValue();
	m_inflationRatio = m_budgetPaid / m_budgetValue;
	m_inflation->SetLabel( wxString::Format( "%.2f%%", ( m_inflationRatio - 1 ) * 100 ) );
	m_panel1->UnAssignPlayer( player, m_inflationRatio );
	bool found = false;
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end() && !found; it++ )
	{
		if( (*it).GetName() == player.GetName() )
		{
			found = true;
			contextMenuPlayer->SetOwner( wxEmptyString );
			contextMenuPlayer->SetAmountPaid( 0 );
			contextMenuPlayer->SetDraftedPosition( wxEmptyString );
			contextMenuPlayer->DraftPlayer( false );
			contextMenuPlayer->SetDraftOrder( 0 );
			contextMenuPlayer->SetCurrentValue( contextMenuPlayer->GetValue() * m_inflationRatio );
		}
	}
	return;
}

void CFrame::OnPrepareDraft(wxCommandEvent &WXUNUSED(event))
{
	if( m_draftPlayer->GetPlayerNameCtrl().GetValue() == contextMenuPlayer->GetName() )
		return;
	m_draftPlayer->GetPlayerNameCtrl().SetValue( contextMenuPlayer->GetName() );
}

void CFrame::OnEditColumns(wxCommandEvent &WXUNUSED(event))
{
	std::vector<wxString> displayedHitters, displayerPitchers;
	CEditColumn dlg( this, *m_data->m_settings, m_columnsDisplayedHitters, m_columnsDisplayedPitchers, m_columnsDisplayed );
	dlg.Centre();
	if( dlg.ShowModal() == wxID_OK )
	{
		m_panel1->ColumnsChanged( m_columnsDisplayedHitters, m_columnsDisplayedPitchers, m_columnsDisplayed );
		for( std::map<wxString, bool>::iterator it = m_columnsDisplayedHitters.begin(); it != m_columnsDisplayedHitters.end(); it++ )
			if( (*it).second )
				displayedHitters.push_back( (*it).first );
		for( std::map<wxString, bool>::iterator it = m_columnsDisplayedPitchers.begin(); it != m_columnsDisplayedPitchers.end(); it++ )
			if( (*it).second )
				displayerPitchers.push_back( (*it).first );
		m_panel3->ChangeGrids( displayedHitters, displayerPitchers );
	}
}

void CFrame::OnClearAllPlayers(wxCommandEvent &event)
{
	if( event.GetId() == wxMENU_FILE_RESET_ALL_PLAYERS )
	{
		this->DoPerformResetLeague( m_leagueId );
		if( m_dirty )
			m_dirty = false;
		else
			m_dirty = true;
		return;
	}
	if( m_draftResult.size() == 0 )
	{
		wxMessageBox( "No draft were performed. Nothing to do." );
		return;
	}
	int result = wxMessageBox( "This will clear all drafted players. Do you wish to continue?", "Warning", wxOK | wxCANCEL | wxCANCEL_DEFAULT | wxICON_EXCLAMATION | wxCENTRE );
	if( result == wxCANCEL )
		return;
	wxBeginBusyCursor();
	for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
	{
		contextMenuPlayer = &(*it);
		DoUnAssignPlayer( false );
	}
	m_draftResult.clear();
	wxEndBusyCursor();
	m_dirty = true;
}

void CFrame::SetContextMenuPlayer(CPlayer &player)
{
	contextMenuPlayer = &player;
}

bool CFrame::IsGood()
{
	return m_isGood;
}

void CFrame::DoDraftPlayer(const CPlayer &player, const wxString &owner, const wxString &name)
{
	bool found = false;
	double beginValue = 0;
	m_panel2->PerformDraft( player );
	m_panel3->AddPlayer( owner, player );
	m_panel4->GetDraftResultPanel().AddDraftedPlayer( player, true );
	m_panel4->GetDraftResultSalaryPanel().PerformDraft( player );
	for( std::vector<CPlayer>::iterator it_new = m_draftPlayer->GetCompleter().GetPlayers().begin(); it_new < m_draftPlayer->GetCompleter().GetPlayers().end() && !found; it_new++ )
	{
		if( (*it_new).GetName() == name )
		{
			(*it_new).DraftPlayer( true );
			(*it_new).SetAmountPaid( player.GetAmountPaid() );
			(*it_new).SetOwner( const_cast<CPlayer &>( player ).GetOwner() );
			(*it_new).SetDraftedPosition( const_cast<CPlayer &>( player ).GetDraftedPosition() );
			found = true;
			m_leagueSalary[owner] -= player.GetAmountPaid();
			m_playersLeftInLeague[owner]--;
			m_maxBidValue[owner] -= ( player.GetAmountPaid() - 1 );
			if( m_teams->GetValue() == owner )
			{
				DisplayDraftedPlayer( (*it_new).IsHitter() ? m_hittersDrafted : m_pitchersDrafted, &( const_cast<CPlayer &>( player ) ), -1 );
				double profit = player.GetValue() - player.GetAmountPaid();
				double prof;
				m_profit->GetLabel().ToDouble( &prof );
				double temp = prof + profit;
				m_profit->SetLabel( wxString::Format( "%.2f", temp ) );
				m_playersLeft->SetLabel( wxString::Format( "%d", m_playersLeftInLeague[owner] ) );
				m_salaryLeft->SetLabel( wxString::Format( "$%d", m_leagueSalary[owner] ) );
				m_average->SetLabel( wxString::Format( "%.2f", (double) m_leagueSalary[owner] / m_playersLeftInLeague[owner] ) );
				m_maxBid->SetLabel( wxString::Format( "$%d", m_maxBidValue[owner] ) );
			}
			beginValue = (*it_new).GetValue();
		}
	}
	found = false;
	for( std::vector<CPlayer>::iterator it_new = m_panel1->GetCompleter().GetPlayers().begin(); it_new < m_panel1->GetCompleter().GetPlayers().end() && !found; it_new++ )
	{
		if( (*it_new).GetName() == name )
		{
			(*it_new).DraftPlayer( true );
			found = true;
		}
	}
	found = true;
/*	double sumValue = 0, sumPaid = 0;
	for( std::vector<CPlayer>::iterator it = m_draftResult.begin(); it < m_draftResult.end(); it++ )
	{
		sumValue += (*it).GetValue();
		sumPaid += (*it).GetAmountPaid();
	}*/
	m_budgetPaid -= player.GetAmountPaid();
	m_budgetValue -= player.GetValue();
	m_inflationRatio = m_budgetPaid / m_budgetValue;
//	m_budget -= player.GetAmountPaid();
	m_valueLeft -= player.GetValue();
	if( m_inflationRatio == 0.0 )
		m_inflationRatio = 1.0;
	m_inflation->SetLabel( wxString::Format( "%.2f%%", ( m_inflationRatio - 1 ) * 100 ) );
	m_availablePlayers--;
	m_panel1->PerformDraft( player, m_inflationRatio, name );
}

void CFrame::DoPerformResetLeague(const int &league)
{
	wxBeginBusyCursor();
	std::vector<CPlayer>::iterator start = m_data->m_players->begin();
	wxGrid *players = m_panel1->GetPlayersGrid();
	int result = m_db->RemoveNewPlayers( league );
	if( result == -1 )
		return;
	else if( result == 1 )
		wxMessageBox( "No players was added. Continue resetting..." );
	if( m_draftResult.size() > 0 )
	{
		m_panel2->ResetRoster();
		m_panel3->ResetProjections();
		m_panel4->ResetDraftResult();
		int rowNum = m_hittersDrafted->GetNumberRows();
		m_hittersDrafted->BeginBatch();
		for( int i = 0; i < rowNum - 1; i++ )
			for( int j = 1; j < m_hittersDrafted->GetNumberCols(); j++ )
			{
				if( i == rowNum - 2 && j == 1 )
					continue;
				m_hittersDrafted->SetCellValue( i, j, wxEmptyString );
				m_hittersDrafted->AutoSizeColumn( j );
			}
		m_hittersDrafted->EndBatch();
		rowNum = m_pitchersDrafted->GetNumberRows();
		m_pitchersDrafted->BeginBatch();
		for( int i = 0; i < rowNum - 1; i++ )
			for( int j = 1; j < m_pitchersDrafted->GetNumberCols(); j++ )
			{
				if( i == rowNum - 2 && j == 1 )
					continue;
				m_pitchersDrafted->SetCellValue( i, j, wxEmptyString );
				m_pitchersDrafted->AutoSizeColumn( j );
			}
		m_pitchersDrafted->EndBatch();
		m_availablePlayers += m_draftResult.size();
	}
	players->BeginBatch();
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
	{
		if( (*it).IsNewPlayer() )
			players->DeleteRows( it - start, 1 );
		else if( (*it).IsPlayerDrafted() )
		{
			(*it).SetScore( (*it).GetOriginalScore() );
			(*it).SetOwner( wxEmptyString );
			(*it).SetValue( (*it).GetBaseValue() );
			(*it).SetAmountPaid( 0 );
			(*it).SetCurrentValue( (*it).GetBaseValue() );
			(*it).SetNotes( wxEmptyString );
			(*it).SetAmountPaid( 0 );
			(*it).SetDraftOrder( 0 );
			(*it).DraftPlayer( false );
		}
	}
	m_data->m_players->erase( std::remove_if( m_data->m_players->begin(), m_data->m_players->end(), Remover() ), m_data->m_players->end() );
	m_panel1->GetCompleter().SetPlayers( *m_data->m_players );
	m_draftPlayer->GetCompleter().SetPlayers( *m_data->m_players );
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
		(*it).SetRange( (*it).GetOriginalRange() );
	PlayerSorter sorter;
	sorter.m_type.push_back( SortObject( SORT_BY_RANGE, true ) );
	std::sort( m_data->m_players->begin(), m_data->m_players->end(), sorter );
	m_panel1->SetCurrentPlayerRow( 0 );
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
		m_panel1->DisplayPlayer( (*it), false );
	players->EndBatch();
	m_budget = m_valueLeft = m_data->m_settings->GetSalary() * m_data->m_settings->GetOwnersNumber();
	int salaryLeft = m_data->m_settings->GetSalary();
	int playersLeft = CalculateHitters() + CalculatePitchers();
	m_salaryLeft->SetLabel( wxString::Format( "$%d", salaryLeft ) );
	m_playersLeft->SetLabel( wxString::Format( "%d", playersLeft ) );
	m_average->SetLabel( wxString::Format( "%.2f", (double) salaryLeft / (double) playersLeft ) );
	m_maxBid->SetLabel( wxString::Format( "$%d", salaryLeft - ( playersLeft - 1 ) ) );
	m_profit->SetLabel( "$0" );
	m_inflationRatio = 1.0;
	m_inflation->SetLabel( "1.0%" );
	m_draftResult.clear();
	wxEndBusyCursor();
}

void CFrame::DoEditPlayerFromZero(const int name, int droppedValue, double changedValue, CPlayer *player, int style, const double &droppedPlayerValue)
{
	double value;
	if( droppedValue == 0 && name != -1 )
		value = changedValue - droppedPlayerValue;
	else if( name == -1 )
		value = changedValue - player->GetValue();
	else
		value = changedValue;
	double diff = (double) value / (double) ( m_availablePlayers - 2 );
//	if( !droppedValue && name != wxEmptyString )
//		value++;
	if( style == NEGATIVE_DIFF )
		diff = -diff;
	double lessMinValue = 0.0;
	int lessMinValueCount = 0;
	int droppedPlayerRange = 0;
	for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
	{
		if( (*it).IsPlayerDeleted() || (*it).IsPlayerDrafted() )
			continue;
		if( (*it).GetPlayerId() == name )
			droppedPlayerRange = (*it).GetRange();
/*		if( name != -1 && (*it).GetPlayerId() == name )
		{
			if( style == NEGATIVE_DIFF )
			{
				bool found = false;
				for( std::vector<CPlayer>::iterator my_it = it + 1; my_it < m_data->m_players->end() && !found; my_it++ )
				{
					if( (*it).IsPlayerDeleted() )
						continue;
					range = (*my_it).GetRange();
					if( range < player->GetRange() )
						(*my_it).SetRange( range + 1 );
					if( range == player->GetRange() )
						found = true;
				}
				(*it).SetRange( (*it).GetRange() + 1 );
			}
			(*it).SetValue( droppedValue );
			(*it).SetCurrentValue( (double) droppedValue );
		}
		else if( (*it).GetName() == player->GetName() )
		{
			(*it).SetValue( droppedValue == 0 ? changedValue : 0 );
			(*it).SetCurrentValue( droppedValue == 0 ? changedValue : 0 );
			if( style == NEGATIVE_DIFF )
			{
				bool found = false;
				for( std::vector<CPlayer>::reverse_iterator it1 = m_data->m_players->rbegin(); it1 != m_data->m_players->rend() && !found; it1++ )
				{
					if( (*it1).GetValue() >= player->GetValue() )
					{
						found = true;
						(*it).SetRange( (*it1).GetRange() + 1 );
					}
				}
			}
		}
		else if( (*it).GetValue() > 0 )
		{
			(*it).SetValue( (*it).GetValue() + diff );
			(*it).SetCurrentValue( (*it).GetCurrentValue() + diff );
		}
		double currValue = (*it).GetCurrentValue();
		if( currValue < 1 && currValue != 0 )
		{
			lessMinValue += 1 - (*it).GetCurrentValue();
			lessMinValueCount++;
		}*/
		if( (*it).GetValue() > 0 && ( (*it).GetPlayerId() != name && (*it).GetPlayerId() != player->GetPlayerId() ) )
		{
			(*it).SetValue( (*it).GetValue() + diff );
			(*it).SetCurrentValue( (*it).GetValue() * m_inflationRatio );
		}
		else if( (*it).GetName() == player->GetName() )
		{
			(*it).SetValue( droppedValue == 0 ? changedValue : 0 );
			(*it).SetCurrentValue( (*it).GetValue() * m_inflationRatio );
		}
		double currValue = (*it).GetValue();
		if( currValue < 1 && currValue != 0 )
		{
			lessMinValue += 1.0 - currValue;
			lessMinValueCount++;
		}
	}
	double newDiff = lessMinValue / ( m_availablePlayers - 2 - lessMinValueCount );
	if( lessMinValueCount > 0 )
	{
		lessMinValue = 0.0;
		lessMinValueCount = 0;
		for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
		{
			if( (*it).IsPlayerDeleted() || (*it).IsPlayerDrafted() )
				continue;
			double currValue = (*it).GetValue();
			if( currValue != 0 )
			{
				if( currValue < 1 )
				{
					(*it).SetValue( 1 );
					(*it).SetCurrentValue( 1 * m_inflationRatio );
				}
				else
				{
					int playerId = (*it).GetPlayerId();
					if( playerId != name && playerId != player->GetPlayerId() )
					{
						(*it).SetValue( (*it).GetValue() - newDiff );
						(*it).SetCurrentValue( (*it).GetValue() * m_inflationRatio );
					}
				}
			}
			currValue = (*it).GetCurrentValue();
			if( currValue < 1 && currValue != 0 )
			{
				lessMinValue += 1.0 - currValue;
				lessMinValueCount++;
			}
		}
		newDiff = lessMinValue / ( m_availablePlayers - 2 - lessMinValueCount );
		if( lessMinValueCount > 0 )
		{
			for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
			{
				if( (*it).IsPlayerDeleted() || (*it).IsPlayerDrafted() )
					continue;
				double currValue = (*it).GetCurrentValue();
				if( currValue != 0 )
				{
					if( currValue < 1 )
					{
						(*it).SetCurrentValue( 1.0 );
					}
					else
					{
						(*it).SetCurrentValue( currValue - newDiff );
					}
				}
			}
		}
	}
	bool rankChanged = false;
	if( changedValue > 0 )
	{
		std::vector<CPlayer>::reverse_iterator changedPlayer;
		for( std::vector<CPlayer>::reverse_iterator it = m_data->m_players->rbegin(); it != m_data->m_players->rend(); it++ )
		{
			if( (*it).GetPlayerId() == player->GetPlayerId() )
				changedPlayer = it;
			if( style == NEGATIVE_DIFF )
			{
				if( (*it).GetCurrentValue() >= changedValue )
					if( it == changedPlayer )
						continue;
					else if( !rankChanged )
					{
						(*changedPlayer).SetRange( (*it).GetRange() + 1 );
						rankChanged = true;
						break;
					}
				if( (*it).GetCurrentValue() < changedValue && (*it).GetRange() <= droppedPlayerRange )
				{
					if( (*it).GetPlayerId() == name )
						continue;
					(*it).SetRange( (*it).GetRange() + 1 );
				}
			}
		}
		if( !rankChanged )
			player->SetRange( 1 );
	}
	if( changedValue < 0 )
	{
		std::vector<CPlayer>::iterator changedPlayer;
		bool found = false;
		for( std::vector<CPlayer>::iterator it = m_data->m_players->begin(); it < m_data->m_players->end(); it++ )
		{
			if( (*it).GetPlayerId() == player->GetPlayerId() )
			{
				changedPlayer = it;
				found = true;
			}
			else if( !found )
				continue;
			if( style == NEGATIVE_DIFF )
			{
				if( (*it).GetCurrentValue() >= changedValue )
					if( it == changedPlayer )
						continue;
				if( (*it).GetCurrentValue() > 0 && (*it).GetRange() <= droppedPlayerRange )
				{
					if( (*it).GetPlayerId() == name )
						continue;
					(*it).SetRange( (*it).GetRange() - 1 );
				}
			}
		}
	}
/*	PlayerSorter sorter;
	sorter.m_type.push_back( SortObject( SORT_BY_CURRVALUE, true ) );
	sorter.m_type.push_back( SortObject( SORT_BY_NAME, true ) );
	std::sort( m_data->m_players->begin(), m_data->m_players->end(), sorter );*/
/*	int i = 0;
	for( std::vector<CPlayer>::iterator it  = m_data->m_players->begin(); it != m_data->m_players->end(); it++ )
	{
		(*it).SetRange( ++i );
	}*/
	for( std::vector<CPlayer>::iterator it = m_draftPlayer->GetCompleter().GetPlayers().begin(); it < m_draftPlayer->GetCompleter().GetPlayers().end(); it++ )
	{
		if( (*it).GetPlayerId() == name )
		{
			(*it).SetValue( 0 );
			(*it).SetCurrentValue( 0.0 );
		}
		else if( (*it).GetPlayerId() == player->GetPlayerId() )
		{
			(*it).SetValue( changedValue );
			(*it).SetCurrentValue( changedValue );
		}
		else
		{
			(*it).SetValue( (*it).GetValue() + diff );
			(*it).SetCurrentValue( (*it).GetCurrentValue() + diff );
		}
	}
	if( lessMinValueCount > 0 )
	{
		for( std::vector<CPlayer>::iterator it = m_draftPlayer->GetCompleter().GetPlayers().begin(); it < m_draftPlayer->GetCompleter().GetPlayers().end(); it++ )
		{
			double currValue = (*it).GetCurrentValue();
			if( currValue != 0 )
			{
				if( currValue < 1 )
				{
					(*it).SetValue( 1 );
					(*it).SetCurrentValue( 1 );
				}
				else
				{
					(*it).SetValue( (*it).GetValue() - newDiff );
					(*it).SetCurrentValue( (*it).GetCurrentValue() - newDiff );
				}
			}
		}
	}
}

int CFrame::GetAvailablePlayers()
{
	return m_availablePlayers;
}

CPlayerDraft *CFrame::GetPlayerDraft()
{
	return m_draftPlayer;
}
